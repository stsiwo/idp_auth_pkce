// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrderingApi.Infrastructure;

namespace OrderingApi.Migrations
{
    [DbContext(typeof(OrderingApiDbContext))]
    partial class OrderingApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("OrderingApi.Infrastructure.DataEntity.Cart", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("OrderingApi.Infrastructure.DataEntity.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderingApi.Infrastructure.DataEntity.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AvailableStock")
                        .HasColumnName("available_stock");

                    b.Property<string>("CartId")
                        .IsRequired()
                        .HasColumnName("cart_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("MainImageURL")
                        .IsRequired()
                        .HasColumnName("main_image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<string>("OrderId")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnName("price");

                    b.Property<int>("Stock")
                        .HasColumnName("stock");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("OrderingApi.Infrastructure.DataEntity.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OrderingApi.Infrastructure.DataEntity.Cart", b =>
                {
                    b.HasOne("OrderingApi.Infrastructure.DataEntity.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OrderingApi.Infrastructure.DataEntity.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OrderingApi.Infrastructure.DataEntity.Order", b =>
                {
                    b.HasOne("OrderingApi.Infrastructure.DataEntity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OrderingApi.Infrastructure.DataEntity.Product", b =>
                {
                    b.HasOne("OrderingApi.Infrastructure.DataEntity.Cart", "Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OrderingApi.Infrastructure.DataEntity.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OrderingApi.Infrastructure.DataEntity.User", b =>
                {
                    b.OwnsOne("OrderingApi.Infrastructure.DataEntity.Address", "HomeAddress", b1 =>
                        {
                            b1.Property<string>("UserId");

                            b1.Property<string>("City")
                                .HasColumnName("home_address_city");

                            b1.Property<string>("Country")
                                .HasColumnName("home_address_country");

                            b1.Property<string>("PostalCode")
                                .HasColumnName("home_address_postal_code");

                            b1.Property<string>("State")
                                .HasColumnName("home_address_state");

                            b1.Property<string>("Street")
                                .HasColumnName("home_address_street");

                            b1.ToTable("Users");

                            b1.HasOne("OrderingApi.Infrastructure.DataEntity.User")
                                .WithOne("HomeAddress")
                                .HasForeignKey("OrderingApi.Infrastructure.DataEntity.Address", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
