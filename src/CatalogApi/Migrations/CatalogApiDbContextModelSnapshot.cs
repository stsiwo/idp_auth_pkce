// <auto-generated />
using System;
using CatalogApi.Infrastructure;
using CatalogApi.Infrastructure.DataEntity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CatalogApi.Migrations
{
    [DbContext(typeof(CatalogApiDbContext))]
    partial class CatalogApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("CatalogApi.Infrastructure.DataEntity.Category", b =>
                {
                    b.Property<CategoryConstants>("Id")
                        .HasColumnName("id")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnName("image_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CatalogApi.Infrastructure.DataEntity.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("creation_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("MainImageURL")
                        .IsRequired()
                        .HasColumnName("main_image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnName("price");

                    b.Property<SubCategoryConstants>("SubCategoryId")
                        .HasColumnName("sub_category_id");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("product");
                });

            modelBuilder.Entity("CatalogApi.Infrastructure.DataEntity.Review", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnName("author");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("creation_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnName("product_id")
                        .HasColumnType("uuid");

                    b.Property<int>("Score")
                        .HasColumnName("score");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("review");
                });

            modelBuilder.Entity("CatalogApi.Infrastructure.DataEntity.SubCategory", b =>
                {
                    b.Property<SubCategoryConstants>("Id")
                        .HasColumnName("id")
                        .HasColumnType("smallint");

                    b.Property<CategoryConstants>("CategoryId")
                        .HasColumnName("category_id")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnName("image_url");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("sub_category");
                });

            modelBuilder.Entity("CatalogApi.Infrastructure.DataEntity.SubImage", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasColumnName("product_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("sub_image");
                });

            modelBuilder.Entity("CatalogApi.Infrastructure.DataEntity.Product", b =>
                {
                    b.HasOne("CatalogApi.Infrastructure.DataEntity.SubCategory", "SubCategory")
                        .WithMany("Products")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CatalogApi.Infrastructure.DataEntity.Review", b =>
                {
                    b.HasOne("CatalogApi.Infrastructure.DataEntity.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CatalogApi.Infrastructure.DataEntity.SubCategory", b =>
                {
                    b.HasOne("CatalogApi.Infrastructure.DataEntity.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CatalogApi.Infrastructure.DataEntity.SubImage", b =>
                {
                    b.HasOne("CatalogApi.Infrastructure.DataEntity.Product", "Product")
                        .WithMany("SubImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
